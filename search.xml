<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言-结构体内存对齐</title>
      <link href="/posts/37773.html"/>
      <url>/posts/37773.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#C%E8%AF%AD%E8%A8%80-%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90">C语言-结构体内存对齐</a><ul><li><a href="#1-%E5%BC%95%E9%A2%98">1-引题</a></li><li><a href="#2-%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BB%93%E6%9E%84%E4%BD%93%E8%A6%81%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90">2-为什么结构体要内存对齐</a></li><li><a href="#3-%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90%E5%90%AB%E4%B9%89">3-结构体对齐含义</a></li><li><a href="#4-%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90%E8%A7%84%E5%88%99%E4%B8%8E%E5%A4%A7%E5%B0%8F%E8%AE%A1%E7%AE%97">4-结构体对齐规则与大小计算</a><ul><li><a href="#4-1%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E8%A7%84%E5%88%99">4-1内存对齐规则</a></li><li><a href="#4-2%E5%AE%9E%E9%99%85%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97">4-2实际内存对齐数的计算</a></li><li><a href="#4-3%E5%AE%9E%E9%99%85%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E6%95%B0%E4%B8%8E%E7%BB%93%E6%9E%84%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%AE%A1%E7%AE%97%E4%BE%8B%E5%AD%90">4-3实际内存对齐数与结构体大小计算例子</a></li></ul></li><li><a href="#4-2%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%84%E4%BD%93%E5%A4%A7%E5%B0%8F%E5%AE%9E%E6%88%98">4-2计算结构体大小实战</a><ul><li><a href="#%E5%AE%9E%E6%88%981-%E6%99%AE%E9%80%9A%E7%BB%93%E6%9E%84%E4%BD%93%E6%88%90%E5%91%98">实战1-普通结构体成员</a></li><li><a href="#%E5%AE%9E%E6%88%982-%E5%90%AB%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E4%BD%93%E6%88%90%E5%91%98">实战2-含数组结构体成员</a></li><li><a href="#%E5%AE%9E%E6%88%983-%E5%B5%8C%E5%A5%97%E7%BB%93%E6%9E%84%E4%BD%93%E6%88%90%E5%91%98">实战3-嵌套结构体成员</a></li></ul></li><li><a href="#5-%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%A4%A7%E5%B0%8F">5-设置默认内存对齐大小</a></li><li><a href="#6-%E7%BB%93%E6%9E%84%E4%BD%93%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96">6-结构体大小优化</a></li><li><a href="#7-%E6%80%BB%E7%BB%93">7-总结</a></li></ul></li></ul><hr><h1 id="C语言-结构体内存对齐"><a href="#C语言-结构体内存对齐" class="headerlink" title="C语言-结构体内存对齐"></a>C语言-结构体内存对齐</h1><h2 id="1-引题"><a href="#1-引题" class="headerlink" title="1-引题"></a>1-引题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">&#125;data;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size=%d\n&quot;</span>,<span class="keyword">sizeof</span>(data));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以猜猜运行结果是多少？</p><details>   <summary>查看运行结果</summary>   <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/reverseyun/gallery@1.0/img/C语言-结构体内存对齐/运行结果.png" alt="运行结果" style="zoom:70%;" /><br>    可能不少人会认为运行结果是：<b>size=6</b><br>    但正确的运行结果应该是：<b>size=12</b><br>    由上方运行结果可知：结构体内存大小的计算并不是简单的将结构体成员的大小进行相加，即结构体成员在内存中<b>并不是紧密排列的</b>。<br>    那么正确的结果应该如何计算出来呢？这就涉及到<b>结构内存对齐</b>的知识了<br></details>由此例子可以引入以下几个问题：<ol><li><strong><a href="#2-%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BB%93%E6%9E%84%E4%BD%93%E8%A6%81%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90">为什么结构体要内存对齐</a></strong></li><li><strong><a href="#3-%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90%E5%90%AB%E4%B9%89">结构体对齐含义</a></strong></li><li><strong><a href="#4-%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90%E8%A7%84%E5%88%99%E4%B8%8E%E5%A4%A7%E5%B0%8F%E8%AE%A1%E7%AE%97">结构体对齐规则与大小计算</a></strong></li></ol><h2 id="2-为什么结构体要内存对齐"><a href="#2-为什么结构体要内存对齐" class="headerlink" title="2-为什么结构体要内存对齐"></a>2-为什么结构体要内存对齐</h2><p>cpu 把内存当成是一块一块的，块的大小可以是<strong>2,4,8,16 个字节</strong>，因此CPU在读取内存的时候是一块一块进行读取的，块的大小称为**内存读取粒度( memory granularity )**。</p><p>假设CPU要读取一个<strong>4字节大小的数据</strong>到寄存器中（假设<strong>内存读取粒度是4</strong>），分两种情况讨论：</p><ol><li><p>数据从0字节开始（<strong>内存对齐</strong>）</p><p>当数据从0字节开始的时候，cpu 直接将0-3四个字节完全读取到寄存器即可。(此时只需<strong>一次访问</strong>)</p></li><li><p>数据从1字节开始（<strong>内存不对齐</strong>）</p><p>当数据从1字节开始的时候，cpu 首先先将前4个字节读到寄存器，并再次读取 4-7 这四个字节字节的数据进寄存器，接着把0字节，5,6,7字节的数据剔除，最后合并1,2,3,4字节的数据进寄存器，对一个内存未对齐的寄存器进行了这么多额外操作，这大大的降低了CPU　的性能。(此时需要<strong>两次访问</strong>)</p></li></ol><p>由此可见：</p><ol><li>内存对齐可以大大提升内存访问速度，是一种用<strong>空间换时间</strong>的方法。</li><li>内存不对齐会导致每次读取数据都会读取两次，并且还要做额外的操作，使得内存读取速度减慢。</li></ol><h2 id="3-结构体对齐含义"><a href="#3-结构体对齐含义" class="headerlink" title="3-结构体对齐含义"></a>3-结构体对齐含义</h2><ul><li>结构体元素是按照定义顺序一个一个放到内存中去的，<strong>但并不是紧密排列的</strong>。</li><li>从结构体存储的首地址开始，每个元素放置到内存中时，它都会认为内存是<strong>按照自己的大小</strong>来划分的。因此元素放置的位置一定会在<strong>自己宽度(即自身实际内存对齐大小)的整数倍</strong>上开始。</li></ul><h2 id="4-结构体对齐规则与大小计算"><a href="#4-结构体对齐规则与大小计算" class="headerlink" title="4-结构体对齐规则与大小计算"></a>4-结构体对齐规则与大小计算</h2><h3 id="4-1内存对齐规则"><a href="#4-1内存对齐规则" class="headerlink" title="4-1内存对齐规则"></a>4-1内存对齐规则</h3><ol><li><span style='color:red'><strong>第一个成员</strong>放在结构体首地址偏移量为0的地址，即<strong>从结构体首地址开始存放</strong></span></li><li><span style='color:red'>每个结构体成员的首地址是<strong>成员自身实际内存对齐大小</strong>的整数倍</span></li><li><span style='color:red'>结构体大小是<strong>结构体实际内存对齐大小</strong>的整数倍</span></li></ol><h3 id="4-2实际内存对齐数的计算"><a href="#4-2实际内存对齐数的计算" class="headerlink" title="4-2实际内存对齐数的计算"></a>4-2实际内存对齐数的计算</h3><ul><li><strong>结构体成员实际内存对齐数</strong> = <strong>结构体成员数据类型大小</strong> 与 <strong>系统默认内存对齐数</strong> 之间的较小值</li><li><strong>结构体实际内存对齐数</strong> = <strong>结构体成员中最大的数据类型大小</strong> 与 <strong>系统默认内存对齐数</strong> 之间的较小值</li></ul><h3 id="4-3实际内存对齐数与结构体大小计算例子"><a href="#4-3实际内存对齐数与结构体大小计算例子" class="headerlink" title="4-3实际内存对齐数与结构体大小计算例子"></a>4-3实际内存对齐数与结构体大小计算例子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> a; </span><br><span class="line">    <span class="keyword">char</span>   b;</span><br><span class="line">    <span class="keyword">short</span>  c;</span><br><span class="line">&#125;data;</span><br></pre></td></tr></table></figure><ul><li><p><strong>系统默认内存对齐数</strong></p><ul><li>一般开发工具默认对齐数为<strong>8个字节</strong>，如：Visual Studio / Dev-C++ / …</li><li>Linux环境下一般默认值为4个字节</li><li>可以通过<strong>开发工具设置</strong>为<strong>1，2，4，8，16</strong>个字节</li><li>可以通过 <strong><a href="#5-%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%A4%A7%E5%B0%8F">#pragma pack(n)</a></strong> 指定为<strong>1，2，4，8，16</strong>个字节</li><li><strong>以下内容若无特殊说明，一律使用 <span style='color:red'>8字节</span> 进行计算</strong></li></ul></li><li><p><strong>结构体成员实际内存对齐数计算</strong></p><p>  <strong>a 成员实际内存对齐数</strong> = 系统默认对齐数(8字节) 与 自身成员数据类型大小(8字节) 的较小值 = 8字节</p><blockquote><p>即 a 成员的首地址必须是8的倍数，但由于 a 成员是结构体的第一个成员，所以首址为结构体首地址。</p></blockquote><p>  <strong>b 成员实际内存对齐数</strong> = 系统默认对齐数(8字节) 与 自身成员数据类型大小(1字节) 的较小值 = 1字节</p><blockquote><p>即 b 成员的首地址必须是1的倍数。</p></blockquote><p>  <strong>c 成员实际内存对齐数</strong> = 系统默认对齐数(8字节) 与 自身成员数据类型大小(2字节) 的较小值 = 2字节</p><blockquote><p>即 c 成员的首地址必须是2的倍数。</p></blockquote></li><li><p><strong>结构体实际内存对齐数计算</strong> </p><p>  <strong>data 结构体实际内存对齐数</strong> = 系统默认对齐数(8字节) 与 结构体成员中最大的数据类型大小(8字节) 的较小值</p><blockquote><p>即结构体实际内存对齐数为8字节</p></blockquote></li><li><p><strong>结构体大小计算</strong></p><p>  内存分布图：</p><blockquote><p>地址字段说明：</p><blockquote><p>带颜色区域：成员占用大小</p></blockquote><blockquote><p>不带颜色区域：填充占位字节</p></blockquote></blockquote>  <table>      <tr>          <th>结构体成员</th>          <th>分析过程(假设结构体首地址为1000)</th>          <th>地址</th>          <th>占用大小</th>      </tr>      <tr>          <td rowspan='4'>              double a<br>              首地址为结构体首地址          </td>          <td rowspan='4'>              从结构体首地址开始存储<br>              占用首地址[1000-1007]          </td>          <td style='background-color:#4169E1'>1000</td>          <td rowspan='4'>8个字节</td>      </tr>      <tr>          <td style='background-color:#4169E1'>1001</td>      </tr>      <tr>          <td style='background-color:#4169E1'>...</td>      </tr>      <tr>          <td style='background-color:#4169E1'>1007</td>      </tr>      <tr>          <td rowspan='2'>              char b<br>              首地址为1的倍数          </td>          <td rowspan='2'>              1008是1的倍数,b 成员从1008存储<br>              占用一个字节，c 成员从1009存储<br>              但1009不是2的倍数<br>              所以需要填充1个字节至1010<br>              占用首地址[1008-1009]          </td>          <td style='background-color:Coral'>1008</td>          <td rowspan='2'>2个字节</td>      </tr>      <tr>          <td>1009</td>      </tr>      <tr>          <td rowspan='4'>              short c<br>              首地址为2的倍数          </td>          <td rowspan='4'>              经过 b 成员填充，c成员从1010存储<br>              此时占用首地址[1010-1011]<br>              此时结构体大小=8+2+2=12<br>              结构体大小不符合8的倍数<br>              需要填充4个字节至16个字节<br>              占用首地址[1010-1015]          </td>          <td style='background-color:#BA55D3'>1010</td>          <td rowspan='4'>6个字节</td>      </tr>      <tr>          <td style='background-color:#BA55D3'>1011</td>      </tr>      <tr>          <td>...</td>      </tr>      <tr>          <td>1015</td>      </tr>  </table><blockquote><p>结构体大小为16个字节</p></blockquote></li></ul><h2 id="4-2计算结构体大小实战"><a href="#4-2计算结构体大小实战" class="headerlink" title="4-2计算结构体大小实战"></a>4-2计算结构体大小实战</h2><p>实战1. <strong><a href="#%E5%AE%9E%E6%88%981-%E6%99%AE%E9%80%9A%E7%BB%93%E6%9E%84%E4%BD%93%E6%88%90%E5%91%98">普通结构体成员</a></strong></p><p>实战2. <strong><a href="#%E5%AE%9E%E6%88%982-%E5%90%AB%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E4%BD%93%E6%88%90%E5%91%98">含数组结构体成员</a></strong></p><p>实战3. <strong><a href="#%E5%AE%9E%E6%88%983-%E5%B5%8C%E5%A5%97%E7%BB%93%E6%9E%84%E4%BD%93%E6%88%90%E5%91%98">嵌套结构体成员</a></strong></p><h3 id="实战1-普通结构体成员"><a href="#实战1-普通结构体成员" class="headerlink" title="实战1-普通结构体成员"></a>实战1-普通结构体成员</h3><blockquote><p>注：默认对齐数为4个字节</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a; </span><br><span class="line">    <span class="keyword">char</span>  b; </span><br><span class="line">    <span class="keyword">double</span> c; </span><br><span class="line">&#125;data;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size=%d\n&quot;</span>,<span class="keyword">sizeof</span>(data));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>   <summary>运行结果</summary>   size=16</details><details><summary>查看分析</summary>    <table>        <tr>            <th>结构体成员</th>            <th>自身数据类型大小</th>            <th>默认内存对齐大小</th>            <th>最终成员对齐大小</th>        </tr>        <tr>            <td>data.a (int)</td>            <td>4个字节</td>            <td>4个字节</td>            <td>4个字节</td>        </tr>        <tr>            <td>data.b (char)</td>            <td>1个字节</td>            <td>4个字节</td>            <td>1个字节</td>        </tr>        <tr>            <td>data.c (double)</td>            <td>8个字节</td>            <td>4个字节</td>            <td>4个字节</td>        </tr>    </table>    <b><span style='color:red'>结构体对齐大小</span> = 默认内存对齐大小(4字节) 与 结构体最大数据类型大小(8字节) 的较小值 = 4字节</b>    <br>    <br>    内存分布图：    <br>    <table>        <tr>            <th>结构体成员</th>            <th>分析过程(假设结构体首地址为1000)</th>            <th>地址</th>            <th>占用大小</th>        </tr>        <tr>            <td rowspan='4'>                data.a (int)<br>                首地址为结构体首地址            </td>            <td rowspan='4'>                从结构体首地址开始存储<br>                占用首地址[1000-1003]            </td>            <td style='background-color:#4169E1'>1000</td>            <td rowspan='4'>4个字节</td>        </tr>        <tr>            <td style='background-color:#4169E1'>1001</td>        </tr>        <tr>            <td style='background-color:#4169E1'>1002</td>        </tr>        <tr>            <td style='background-color:#4169E1'>1003</td>        </tr>        <tr>            <td rowspan='4'>                data.b (char)<br>                首地址为1的倍数            </td>            <td rowspan='4'>                1004是1的倍数,b 成员从1004存储<br>                占用 1 个字节，c 成员从1005存储<br>                但1005不是4的倍数<br>                所以需要填充3个字节至1008<br>                占用首地址[1004-1007]            </td>            <td style='background-color:Coral'>1004</td>            <td rowspan='4'>4个字节</td>        </tr>        <tr>            <td>1005</td>        </tr>        <tr>            <td>1006</td>        </tr>        <tr>            <td>1007</td>        </tr>        <tr>            <td rowspan='4'>                data.c (double)<br>                首地址为4的倍数            </td>            <td rowspan='4'>                经过 b 成员填充，c成员从1008存储<br>                此时占用首地址[1008-1015]<br>                此时结构体大小=4+4+8=16<br>                结构体大小满足结构体对齐大小 <span style='color:red'>4</span> 的倍数<br>                占用首地址[1008-1015]            </td>            <td style='background-color:#BA55D3'>1008</td>            <td rowspan='4'>8个字节</td>        </tr>        <tr>            <td style='background-color:#BA55D3'>1009</td>        </tr>        <tr>            <td style='background-color:#BA55D3'>...</td>        </tr>        <tr>            <td style='background-color:#BA55D3'>1015</td>        </tr>    </table>    <b>最终结构体大小为<span style='color:red'>16个字节</span>。</b></details><h3 id="实战2-含数组结构体成员"><a href="#实战2-含数组结构体成员" class="headerlink" title="实战2-含数组结构体成员"></a>实战2-含数组结构体成员</h3><blockquote><p>对齐规则与普通结构体成员一致，只是 <strong>数组成员所占用的内存大小 = 数组大小 * 数组的数据类型大小</strong></p><p>注：默认对齐数为8个字节</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">3</span>]; </span><br><span class="line">    <span class="keyword">int</span>  b[<span class="number">3</span>]; </span><br><span class="line">    <span class="keyword">char</span> c; </span><br><span class="line">&#125;data;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size=%d\n&quot;</span>,<span class="keyword">sizeof</span>(data));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>   <summary>运行结果</summary>   size=20</details><details><summary>查看分析</summary>    <table>        <tr>            <th>结构体成员</th>            <th>自身数据类型大小</th>            <th>默认内存对齐大小</th>            <th>最终成员对齐大小</th>        </tr>        <tr>            <td>data.a (char)</td>            <td>1个字节</td>            <td>8个字节</td>            <td>1个字节</td>        </tr>        <tr>            <td>data.b (int)</td>            <td>4个字节</td>            <td>8个字节</td>            <td>4个字节</td>        </tr>        <tr>            <td>data.c (char)</td>            <td>1个字节</td>            <td>8个字节</td>            <td>1个字节</td>        </tr>    </table>    <b><span style='color:red'>结构体对齐大小</span> = 默认内存对齐大小(8字节) 与 结构体最大数据类型大小(4字节) 的较小值 = 4字节</b>    <br>    <br>    内存分布图：    <br>    <table>        <tr>            <th>结构体成员</th>            <th>分析过程(假设结构体首地址为1000)</th>            <th>地址</th>            <th>占用大小</th>        </tr>        <tr>            <td rowspan='4'>                data.a (char[3])<br>                首地址为结构体首地址            </td>            <td rowspan='4'>                从结构体首地址开始存储<br>                占用 3*1=3 个字节，b成员从1003存储<br>                但1003不是4的倍数<br>                所以需要填充1个字节至1004<br>                占用首地址[1000-1003]            </td>            <td style='background-color:#4169E1'>1000</td>            <td rowspan='4'>4个字节</td>        </tr>        <tr>            <td style='background-color:#4169E1'>1001</td>        </tr>        <tr>            <td style='background-color:#4169E1'>1002</td>        </tr>        <tr>            <td>1003</td>        </tr>        <tr>            <td rowspan='4'>                data.b (int[3])<br>                首地址为4的倍数            </td>            <td rowspan='4'>                1004是4的倍数，b 成员从1004存储<br>                占用 3*4=12 个字节，c 成员从1016存储<br>                占用首地址[1004-1015]            </td>            <td style='background-color:Coral'>1004</td>            <td rowspan='4'>12个字节</td>        </tr>        <tr>            <td style='background-color:Coral'>1005</td>        </tr>        <tr>            <td style='background-color:Coral'>...</td>        </tr>        <tr>            <td style='background-color:Coral'>1015</td>        </tr>        <tr>            <td rowspan='4'>                data.c (char)<br>                首地址为1的倍数            </td>            <td rowspan='4'>                c成员从1016存储<br>                此时占用首地址[1016]<br>                此时结构体大小=4+12+1=17<br>                结构体大小不满足结构体对齐大小 <span style='color:red'>4</span> 的倍数<br>                需要填充3个字节<br>                占用首地址[1016-1019]            </td>            <td style='background-color:#BA55D3'>1016</td>            <td rowspan='4'>4个字节</td>        </tr>        <tr>            <td>1017</td>        </tr>        <tr>            <td>1008</td>        </tr>        <tr>            <td>1019</td>        </tr>    </table>    <b>最终结构体大小为 <span style='color:red'>20个字节</span> 。</b></details><h3 id="实战3-嵌套结构体成员"><a href="#实战3-嵌套结构体成员" class="headerlink" title="实战3-嵌套结构体成员"></a>实战3-嵌套结构体成员</h3><blockquote><p>对齐规则与普通结构体成员一致</p><p>但有两点需要注意：</p><ol><li><strong>嵌套的结构体成员的对齐数</strong> = <strong>自身的结构体成员中最大的数据类型大小</strong> 与 <strong>默认对齐数</strong> 的较小值</li><li><strong>计算结构体实际内存对齐大小要把嵌套结构体成员展开计算</strong></li></ol><p>注：默认对齐数为8个字节</p><p>如以下例子：data_2.d1成员中<strong>最大的数据类型大小为8字节</strong>，<strong>默认对齐数为8字节</strong>，<strong>两者较小值为8字节</strong>，所以data_2.d1成员的<strong>对齐数为8个字节</strong>，即d1的首地址需要是<strong>8的倍数</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data_1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> a; </span><br><span class="line">    <span class="keyword">double</span>  b; </span><br><span class="line">    <span class="keyword">char</span> c; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">3</span>]; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data_1</span> <span class="title">d1</span>;</span></span><br><span class="line">    <span class="keyword">int</span>  b[<span class="number">3</span>]; </span><br><span class="line">    <span class="keyword">char</span> c; </span><br><span class="line">&#125;data_2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size1=%d\n&quot;</span>,<span class="keyword">sizeof</span>(struct data_1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size2=%d\n&quot;</span>,<span class="keyword">sizeof</span>(data_2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>   <summary>运行结果</summary>   size1=24<br>   size2=48</details><details><summary>查看分析</summary><p><strong>一：对data1进行分析</strong></p><table>    <tr>        <th>结构体成员</th>        <th>自身数据类型大小</th>        <th>默认内存对齐大小</th>        <th>最终成员对齐大小</th>    </tr>    <tr>        <td>data_1.a (char)</td>        <td>1个字节</td>        <td>8个字节</td>        <td>1个字节</td>    </tr>    <tr>        <td>data_1.b (double)</td>        <td>8个字节</td>        <td>8个字节</td>        <td>8个字节</td>    </tr>    <tr>        <td>data_1.c (char)</td>        <td>1个字节</td>        <td>8个字节</td>        <td>1个字节</td>    </tr></table><b><span style='color:red'>结构体对齐大小</span> = 默认内存对齐大小(8字节) 与 结构体最大数据类型大小(8字节) 的较小值 = 8字节</b><br><br>内存分布图：<br><table>    <tr>        <th>结构体成员</th>        <th>分析过程(假设结构体首地址为1000)</th>        <th>地址</th>        <th>占用大小</th>    </tr>    <tr>        <td rowspan='4'>            data_1.a (char)<br>            首地址为结构体首地址        </td>        <td rowspan='4'>            从结构体首地址开始存储<br>            占用 1 个字节，b成员从1001存储<br>            但1001不是8的倍数<br>            所以需要填充7个字节至1008<br>            占用首地址[1000-1007]        </td>        <td style='background-color:#4169E1'>1000</td>        <td rowspan='4'>8个字节</td>    </tr>    <tr>        <td>1001</td>    </tr>    <tr>        <td>...</td>    </tr>    <tr>        <td>1007</td>    </tr>    <tr>        <td rowspan='4'>            data_1.b (double)<br>            首地址为8的倍数        </td>        <td rowspan='4'>            1008是8的倍数，b 成员从1008存储<br>            占用 8 个字节，c 成员从1016存储<br>            占用首地址[1008-1015]        </td>        <td style='background-color:Coral'>1008</td>        <td rowspan='4'>8个字节</td>    </tr>    <tr>        <td style='background-color:Coral'>1009</td>    </tr>    <tr>        <td style='background-color:Coral'>...</td>    </tr>    <tr>        <td style='background-color:Coral'>1015</td>    </tr>    <tr>        <td rowspan='4'>            data_1.c (char)<br>            首地址为1的倍数        </td>        <td rowspan='4'>            c成员从1016存储<br>            此时占用首地址[1016]<br>            此时结构体大小=8+8+1=17<br>            结构体大小不满足结构体对齐大小 <span style='color:red'>8</span> 的倍数 <br>            需要填充7个字节<br>            占用首地址[1016-1023]        </td>        <td style='background-color:#BA55D3'>1016</td>        <td rowspan='4'>8个字节</td>    </tr>    <tr>        <td>1017</td>    </tr>    <tr>        <td>...</td>    </tr>    <tr>        <td>1023</td>    </tr></table><b>data_1结构体大小为 <span style='color:red'>24个字节</span> 。</b><br><br><p><strong>二：对data2进行分析</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// data_2可以展开为</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">3</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// struct data_1 d1; </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> a; </span><br><span class="line">        <span class="keyword">double</span>  b; </span><br><span class="line">        <span class="keyword">char</span> c; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>  b[<span class="number">3</span>]; </span><br><span class="line">    <span class="keyword">char</span> c; </span><br><span class="line">&#125;data_2;</span><br></pre></td></tr></table></figure><table>    <tr>        <th>结构体成员</th>        <th>自身数据类型大小</th>        <th>默认内存对齐大小</th>        <th>最终成员对齐大小</th>    </tr>    <tr>        <td>data_2.a (char)</td>        <td>1个字节</td>        <td>8个字节</td>        <td>1个字节</td>    </tr>    <tr>        <td>data_2.d1 (struct data_1)</td>        <td>data_2.d1成员中最大的数据类型大小为8个字节</td>        <td>8个字节</td>        <td>8个字节</td>    </tr>    <tr>        <td>data_2.b (int)</td>        <td>4个字节</td>        <td>8个字节</td>        <td>4个字节</td>    </tr>    <tr>        <td>data_2.c (char)</td>        <td>1个字节</td>        <td>8个字节</td>        <td>1个字节</td>    </tr></table><b><span style='color:red'>结构体对齐大小</span> = 默认内存对齐大小(8字节) 与 <span style='color:red'>data_1展开后</span>的结构体最大数据类型大小(8字节) 的较小值 = 8字节</b><br><br>内存分布图：<br><table>    <tr>        <th>结构体成员</th>        <th>分析过程(假设结构体首地址为1000)</th>        <th>地址</th>        <th>占用大小</th>    </tr>    <tr>        <td rowspan='6'>            data_2.a (char[3])<br>            首地址为结构体首地址        </td>        <td rowspan='6'>            从结构体首地址开始存储<br>            占用 3*1=3 个字节，d1成员从1003存储<br>            但1003不是8的倍数<br>            所以需要填充5个字节至1008<br>            占用首地址[1000-1007]        </td>        <td style='background-color:#4169E1'>1000</td>        <td rowspan='6'>8个字节</td>    </tr>    <tr>        <td style='background-color:#4169E1'>1001</td>    </tr>    <tr>        <td style='background-color:#4169E1'>1002</td>    </tr>    <tr>        <td>1003</td>    </tr>    <tr>        <td>...</td>    </tr>    <tr>        <td>1007</td>    </tr>    <tr>        <td rowspan='4'>            data_2.d1 (struct data_1)<br>            首地址为8的倍数        </td>        <td rowspan='4'>            1008是8的倍数，d1 成员从1008存储<br>            占用 24 个字节，b 成员从1032存储<br>            占用首地址[1008-1031]        </td>        <td style='background-color:Coral'>1008</td>        <td rowspan='4'>24个字节</td>    </tr>    <tr>        <td style='background-color:Coral'>1009</td>    </tr>    <tr>        <td style='background-color:Coral'>...</td>    </tr>    <tr>        <td style='background-color:Coral'>1031</td>    </tr>    <tr>        <td rowspan='4'>            data_2.b (int[3])<br>            首地址为4的倍数        </td>        <td rowspan='4'>            1032是4的倍数，b成员从1032存储<br>            占用 4*3=12 个字节，c成员从1044<br>            占用首地址[1032-1043]<br>        </td>        <td style='background-color:#BA55D3'>1032</td>        <td rowspan='4'>12个字节</td>    </tr>    <tr>        <td>1033</td>    </tr>    <tr>        <td>...</td>    </tr>    <tr>        <td>1043</td>    </tr>    <tr>        <td rowspan='4'>            data_2.c (char)<br>            首地址为1的倍数        </td>        <td rowspan='4'>            c成员从1044存储<br>            此时占用首地址[1044]<br>            此时结构体大小=8+24+12+1=45<br>            结构体大小不满足结构体对齐大小 <span style='color:red'>8</span> 的倍数<br>            需要填充3个字节<br>            占用首地址[1044-1047]        </td>        <td style='background-color:#BA55D3'>1044</td>        <td rowspan='4'>4个字节</td>    </tr>    <tr>        <td>1045</td>    </tr>    <tr>        <td>1046</td>    </tr>    <tr>        <td>1047</td>    </tr></table><b>最终结构体大小为 <span style='color:red'>48个字节</span> 。</b></details><h2 id="5-设置默认内存对齐大小"><a href="#5-设置默认内存对齐大小" class="headerlink" title="5-设置默认内存对齐大小"></a>5-设置默认内存对齐大小</h2><p>前面提到过系统默认的内存对齐数一般是8个字节 (linux环境下一般是4个字节)</p><p>但有些开发工具也提供设置，如Visual Studio</p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/reverseyun/gallery@1.0/img/C语言-结构体内存对齐/VS配置默认结构体内存对齐数.jpg" style="zoom:100%;" /><p>除了在开发工具中可以设置默认内存对齐数之外，在程序中可以通过 <strong>#pragma pack(n)（n取值为1，2，4，8，16）</strong> 来指定系统默认内存对齐数。</p><p>例子：</p><ol><li><p>默认对齐数8字节</p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/reverseyun/gallery@1.0/img/C语言-结构体内存对齐/默认对齐数8字节.jpg" style="zoom:100%;" /></li><li><p>设置默认对齐数4字节</p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/reverseyun/gallery@1.0/img/C语言-结构体内存对齐/默认对齐数4字节.jpg" style="zoom:100%;" /></li><li><p>设置默认对齐数1字节(相当于不考虑内存对齐,直接存放)</p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/reverseyun/gallery@1.0/img/C语言-结构体内存对齐/默认对齐数1字节.jpg" style="zoom:100%;" /></li></ol><h2 id="6-结构体大小优化"><a href="#6-结构体大小优化" class="headerlink" title="6-结构体大小优化"></a>6-结构体大小优化</h2><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/reverseyun/gallery@1.0/img/C语言-结构体内存对齐/结构体大小优化.jpg" style="zoom:100%;" /><p>由上图可知：结构体成员的顺序会影响结构体大小</p><p>由于结构体对齐，成员的首地址需要是成员对齐数的倍数，不满足则要填充空字节。所以尽量减少空字节的填充可以使结构体的总大小减小。</p><p>减少空字节填充：</p><ol><li>相同数据类型放在一起</li><li>数据类型由小到大声明</li></ol><p><strong>结构体大小优化视具体情况而定，内存足够的情况下，为了提高程序可读性，可以不必要考虑结构体大小的优化</strong></p><p>如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明 英雄(hero) 结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span>  id;     <span class="comment">// id号</span></span><br><span class="line">    <span class="keyword">char</span> *name;  <span class="comment">// 名字</span></span><br><span class="line">    <span class="keyword">char</span> sex;    <span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">int</span>  atn;    <span class="comment">// 攻击力</span></span><br><span class="line">    <span class="keyword">int</span>  def;    <span class="comment">// 防御力</span></span><br><span class="line">    <span class="keyword">int</span>  hp;     <span class="comment">// 生命值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行结构体大小优化</span></span><br><span class="line"><span class="comment">// 可见优化后的顺序并不利于程序的可读性</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> sex;    <span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">int</span>  id;     <span class="comment">// id号</span></span><br><span class="line">    <span class="keyword">int</span>  atn;    <span class="comment">// 攻击力</span></span><br><span class="line">    <span class="keyword">int</span>  def;    <span class="comment">// 防御力</span></span><br><span class="line">    <span class="keyword">int</span>  hp;     <span class="comment">// 生命值</span></span><br><span class="line">    <span class="keyword">char</span> *name;  <span class="comment">// 名字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7-总结"></a>7-总结</h2><ol><li><p>结构体对齐优点：利用空间换时间，提高程序的性能</p></li><li><p>结构体对齐规则</p><ol><li><p>第一个成员放在结构体首地址偏移量为0的地址，即从结构体首地址开始存放</p></li><li><p>每个结构体成员的首地址是成员自身实际内存对齐大小的整数倍</p><p> 结构体成员实际内存对齐大小 = 成员自身数据类型大小 与 默认结构体内存对齐大小 的较小值</p></li><li><p>结构体大小是结构体实际内存对齐大小的整数倍</p><p> 结构体实际内存对齐大小 = 结构体成员中最大数据类型大小 与 默认结构体内存对齐大小 的较小值</p></li></ol></li><li><p>结构体大小计算三种情况</p><ol><li><p>普通结构体成员 (遵循对齐规则)</p></li><li><p>含数组结构体成员 (遵循对齐规则)</p><p>  数组成员所占用的内存大小 = 数组大小 * 数组的数据类型大小</p></li><li><p>嵌套结构体成员 (遵循对齐规则)</p><ol><li>嵌套的结构体成员的对齐数 = 自身的结构体成员中最大的数据类型大小 与 默认对齐数 的较小值</li><li>计算结构体实际内存对齐大小要把嵌套结构体成员展开计算</li></ol></li></ol></li><li><p>默认结构体对齐大小</p><ol><li>一般编译工具默认是8字节 (linux下一般是4字节)</li><li>一些编译工具经过配置可以更改默认结构体对齐大小(如：Visual Stdio…)</li><li>程序中通过 #pragma pack(n) 指定默认结构体对齐大小</li></ol></li><li><p>结构体大小优化</p><ol><li>相同数据类型放在一起</li><li>数据类型由小到大声明</li></ol><p>视具体情况而定，内存足够的情况下，为了提高程序可读性，可以不必要考虑结构体大小的优化</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 结构体内存对齐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
