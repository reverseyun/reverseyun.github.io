<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-位域</title>
      <link href="/posts/37775.html"/>
      <url>/posts/37775.html</url>
      
        <content type="html"><![CDATA[<h1 id="C语言-位域-位段"><a href="#C语言-位域-位段" class="headerlink" title="C语言-位域(位段)"></a>C语言-位域(位段)</h1><h2 id="1-本文代码前置说明"><a href="#1-本文代码前置说明" class="headerlink" title="1-本文代码前置说明"></a>1-本文代码前置说明</h2><p>本文所有代码默认定义以下类型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> u8;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> u16;</span><br></pre></td></tr></table></figure><h2 id="2-含义与作用"><a href="#2-含义与作用" class="headerlink" title="2-含义与作用"></a>2-含义与作用</h2><h3 id="2-1含义"><a href="#2-1含义" class="headerlink" title="2-1含义"></a>2-1含义</h3><p>C语言允许在一个结构体中以 “位”(二进制位) 为单位来指定其成员所占内存长度，这种以位为单位的成员称为<strong>位位域/位段( bit field )</strong> 。利用位段能够用较少的位数存储数据。</p><h3 id="2-2作用"><a href="#2-2作用" class="headerlink" title="2-2作用"></a>2-2作用</h3><p>某些信息在存储的时候，并不需要占用一个完整的字节，而只需占一个或几个二进制位。例如在存放一个开关量时，只有0和1两种状态，用一个二进制位即可。此时使用位域(位段),可以更加节省存储空间。</p><h2 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3-应用场景"></a>3-应用场景</h2><p>假设有如下数据帧格式用来保存测温设备状态，使用结构体保存此数据帧。</p><table><thead><tr><th align="center">头部信息(head_info)</th><th align="center">温度开启标志(temp_flag)</th><th align="center">是否报警(temp_alarm)</th><th align="center">温度值(temp_value)</th><th align="center">校验位(check_num)</th></tr></thead><tbody><tr><td align="center">4 bit</td><td align="center">1 bit</td><td align="center">1 bit</td><td align="center">2 byte</td><td align="center">8 bit</td></tr></tbody></table><h3 id="3-1不使用位域"><a href="#3-1不使用位域" class="headerlink" title="3-1不使用位域"></a>3-1不使用位域</h3><p>定义结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">temp_dev</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u8  head_info;</span><br><span class="line">    u8  temp_flag;</span><br><span class="line">    u8  temp_alarm;</span><br><span class="line">    u16 temp_value;</span><br><span class="line">    u8  check_num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-2使用位域"><a href="#3-2使用位域" class="headerlink" title="3-2使用位域"></a>3-2使用位域</h3><p>定义结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">temp_dev</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u8  head_info  : <span class="number">4</span>;</span><br><span class="line">    u8  temp_flag  : <span class="number">1</span>;</span><br><span class="line">    u8  temp_alarm : <span class="number">1</span>;</span><br><span class="line">    u16 temp_value;</span><br><span class="line">    u8  check_num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-3位域的优点"><a href="#3-3位域的优点" class="headerlink" title="3-3位域的优点"></a>3-3位域的优点</h3><p>用 sizeof() 函数可计算出结构体大小 ( 如下图所示 ) ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/reverseyun/gallery/img/C语言-位域/1.png" alt="运行结果" style="zoom:70%;" /><br></p><ul><li>不使用位域定义结构体：结构体大小为：<strong>8个字节</strong></li><li>使用位域定义结构体如下：结构体大小为：<strong>6个字节</strong></li></ul><p><strong>由此可见使用位域的方式定义结构体成员，可以节省不少存储空间，特别是多个成员只用到少数二进制位的时候，存储空间的节省将更加明显。</strong></p><h2 id="4-具体用法"><a href="#4-具体用法" class="headerlink" title="4-具体用法"></a>4-具体用法</h2><h3 id="4-1位域-位段-的定义"><a href="#4-1位域-位段-的定义" class="headerlink" title="4-1位域(位段)的定义"></a>4-1位域(位段)的定义</h3><p>位域的定义与结构体的定义相类似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> u8;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> 位域结构名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 位域列表...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    其中，位域列表的格式为：</span></span><br><span class="line"><span class="comment">    数据类型 位域名 : 位域长度</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>定义例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bits</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u8 a : <span class="number">3</span>;</span><br><span class="line">    u8 b : <span class="number">1</span>;</span><br><span class="line">    u8 c : <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-2位域的存储规则"><a href="#4-2位域的存储规则" class="headerlink" title="4-2位域的存储规则"></a>4-2位域的存储规则</h3><blockquote><p>注：</p><p>sizeof() 返回结果以字节为单位</p><p>sizeof() 不能用于计算位域字段(即位域结构体单个成员大小)，只能计算位域结构体总大小。</p></blockquote><hr><h4 id="4-2-1数据类型相同，可将数据“捆绑”在一起"><a href="#4-2-1数据类型相同，可将数据“捆绑”在一起" class="headerlink" title="4-2-1数据类型相同，可将数据“捆绑”在一起"></a>4-2-1数据类型相同，可将数据“捆绑”在一起</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bits</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u8 a : <span class="number">3</span>;</span><br><span class="line">    u8 b : <span class="number">1</span>;</span><br><span class="line">    u8 c : <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(struct bits));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：1</p><p>解析：</p><ol><li>u8类型占用一个字节(8个二进制位)。</li><li>结构体成员a开辟了1个字节大小的内存空间，并且指定了a成员只使用3个位，其余5个位不使用。</li><li>结构体成员a,b,c数据类型都是u8，并且b和c一共使用了3个二进制位，a开辟的内存空间剩下的5个位足够使用，所以可以进行”捆绑”(就是使用已经开辟好的空间进行存储，不再另外开辟空间)，所以后面就不再开辟内存空间了，使用剩余的5个位进行存储。</li><li>最终开辟了1个字节(8个二进制位)，使用了6个二进制位，还剩下2个不使用，实际存储的大小为6个二进制位，占用的内存大小为1个字节。</li></ol><hr><h4 id="4-2-2数据类型相同，剩余位数不够“捆绑”"><a href="#4-2-2数据类型相同，剩余位数不够“捆绑”" class="headerlink" title="4-2-2数据类型相同，剩余位数不够“捆绑”"></a>4-2-2数据类型相同，剩余位数不够“捆绑”</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bits</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u8 a : <span class="number">3</span>;</span><br><span class="line">    u8 b : <span class="number">1</span>;</span><br><span class="line">    u8 c : <span class="number">6</span>;</span><br><span class="line">    u8 d : <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(struct bits));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：3</p><p>解析：</p><ol><li>结构体成员a开辟了1个字节(8个二进制位)的内存空间。</li><li>结构体成员a,b占用了4个二进制位，剩余4个二进制位。</li><li>结构体成员c占用6个二进制位，a开辟的空间不够存，剩余的4个二进制位空着不使用，成员c开辟1个字节的内存空间。</li><li>结构体成员d占用了3个二进制位，成员c开辟的空间已经占了6个二进制位，只剩下2个二进制位，不够d成员存放，成员d会开辟1个字节的内存空间。</li><li>最终开辟了3次内存空间，总大小占用了3个字节。</li></ol><hr><h4 id="4-2-3数据类型不同（对齐系数不同），不能将数据“捆绑”一起"><a href="#4-2-3数据类型不同（对齐系数不同），不能将数据“捆绑”一起" class="headerlink" title="4-2-3数据类型不同（对齐系数不同），不能将数据“捆绑”一起"></a>4-2-3数据类型不同（对齐系数不同），不能将数据“捆绑”一起</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bits</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u8  a : <span class="number">3</span>;</span><br><span class="line">    u16 b : <span class="number">1</span>;</span><br><span class="line">    u8  c : <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(struct bits));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：6</p><p>解析：</p><ol><li>结构体成员a开辟了1个字节(8个二进制位)的内存空间，结构体成员a占用了3个二进制位。</li><li>由于结构体成员b的数据类型与a不同，两者不能进行”捆绑”(即剩余的空间不能共用)，所以结构体成员b按自己的数据类型大小开辟空间，即2个字节。</li><li>由于结构体成员c的数据类型与b也不同，两者也不能进行”捆绑”，所以结构体成员c也开辟了1个字节的内存空间。</li><li>最终开辟了3次内存空间，共占用了6个字节。</li></ol><blockquote><p>注：此时可能会有小伙伴有疑惑，a开辟了1个字节，b开辟了2个字节，c开辟了1个字节，不应该是占用4个字节吗？？？怎么多了2个字节？？？</p><p>答：位域结构体大小的计算也遵循结构体内存对齐规则，若有小伙伴不清楚，请先前往 《<a href="https://codebbs.gitee.io/posts/37773.html">C语言-结构体内存对齐</a>》这篇文章进行了解，此文章对结构体内存对齐作了详解！</p></blockquote><hr><h4 id="4-2-4长度为0的位域段（占位作用）"><a href="#4-2-4长度为0的位域段（占位作用）" class="headerlink" title="4-2-4长度为0的位域段（占位作用）"></a>4-2-4长度为0的位域段（占位作用）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bits</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u8  a : <span class="number">3</span>;</span><br><span class="line">    u8    : <span class="number">0</span>; <span class="comment">// 0长度位域段不能有变量名！</span></span><br><span class="line">    u8  c : <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(struct bits));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：2</p><p>解析：</p><ol><li>结构体成员a开辟了1个字节(8个二进制位)的内存空间，结构体成员a占用了3个二进制位。</li><li>0长度位域将内存空间对齐到结构体成员a所开辟的空间末尾，即成员a剩余的空间不使用。</li><li>结构体成员c将重新开辟内存空间进行存储。</li><li>最终开辟了2次内存空间，占用了2个字节。</li></ol><hr><h3 id="4-3位域的赋值"><a href="#4-3位域的赋值" class="headerlink" title="4-3位域的赋值"></a>4-3位域的赋值</h3><h4 id="4-3-1无符号类型赋值"><a href="#4-3-1无符号类型赋值" class="headerlink" title="4-3-1无符号类型赋值"></a>4-3-1无符号类型赋值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bits</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u8  a : <span class="number">3</span>;</span><br><span class="line">    u8  b : <span class="number">2</span>;</span><br><span class="line">&#125; bits_var;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bits_var.a = <span class="number">4</span>;  <span class="comment">// 2的二进制为0100</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, bits_var.a);</span><br><span class="line">    bits_var.a = <span class="number">13</span>; <span class="comment">// 13的二进制为1101</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, bits_var.a);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：4 5</p><p>解析：</p><ol><li>位域在赋值的时候不应该超出该位域的二进制位的存储范围。</li><li>bits_var.a占用3个二进制位，由于是无符号的，存储范围为0-7。</li><li>bits_var.a = 4;无超出范围，所以第一次打印出4。</li><li>bits_var.a = 13;已经超出范围了，所以打印结果并不是预想中的13。超出范围编译器会警告，此时存储的值是截断后的值。13的二进制为1101，由于只能存储3个位，所以截取低3位，即101作为值进行存储，所以最终打印结果为5。</li><li>在开发中应该避免超出范围的位域存储。</li></ol><h4 id="4-3-1有符号类型赋值"><a href="#4-3-1有符号类型赋值" class="headerlink" title="4-3-1有符号类型赋值"></a>4-3-1有符号类型赋值</h4><blockquote><p>前面所有的代码示例都是无符号类型进行存储，此处对有符号类型进行探讨。<br>位域一样可以存储有符号的数据类型，即存储负数。并且该位域的最高位为符号位。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bits</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span>  a : <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">char</span>  b : <span class="number">2</span>;</span><br><span class="line">&#125; bits_var;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bits_var.a = <span class="number">-1</span>;  <span class="comment">// -1的补码为  1000 0011</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, bits_var.a);</span><br><span class="line"></span><br><span class="line">    bits_var.a = <span class="number">1</span>;   <span class="comment">//  1的补码为  0000 0001</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, bits_var.a);</span><br><span class="line"></span><br><span class="line">    bits_var.a = <span class="number">7</span>;   <span class="comment">//  7的补码为  0000 0111</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, bits_var.a);</span><br><span class="line"></span><br><span class="line">    bits_var.a = <span class="number">13</span>;  <span class="comment">//  13的补码为 0000 1101</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, bits_var.a);</span><br><span class="line"></span><br><span class="line">    bits_var.a = <span class="number">-13</span>; <span class="comment">// -13的补码为 1000 0011</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, bits_var.a);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：-1 1 -1 -3 3</p><p>解析：</p><blockquote><p>看解析之前，需要对原码、反码、补码有一定的认识，并且会进行计算。若不了解，可前往文章 《<a href="https://codebbs.gitee.io/posts/37774.html">原码、反码、补码知识</a>》，此文章对原码、反码、补码知识进行了详解！</p></blockquote><ol><li>bits_var.a占用3个二进制位，并且是有符号类型，所以最高位为符号位，数据位只占2位。</li><li>bits_var.a = -1; 补码存储为：1 11，负数需要转换成原码(1 01)输出 打印-1。</li><li>bits_var.a = 2;  补码存储为：0 01，打印1。</li><li>bits_var.a = 7;  补码存储为：1 11，负数需要转换成原码(1 01)输出 打印-1。</li><li>bits_var.a = 13;  补码为0000 1101，超出最大存储范围，截取低三位，最终补码存储为：1 01，负数需要转换成原码(1 11)输出 打印-3。</li><li>bits_var.a = -13; 补码为1000 0011，超出最大存储范围，截取低三位，最终补码存储为：0 11，打印3。</li><li>最终结果为：-1 1 -1 -3 3</li></ol>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 位域 </tag>
            
            <tag> 位段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原码、反码、补码知识</title>
      <link href="/posts/37774.html"/>
      <url>/posts/37774.html</url>
      
        <content type="html"><![CDATA[<h1 id="原码、反码、补码知识"><a href="#原码、反码、补码知识" class="headerlink" title="原码、反码、补码知识"></a>原码、反码、补码知识</h1><h2 id="1-前置说明"><a href="#1-前置说明" class="headerlink" title="1-前置说明"></a>1-前置说明</h2><p>本文涉及到的数据都用1个字节(即8个二进制位)进行存储。</p><h2 id="2-原码、反码、补码概念"><a href="#2-原码、反码、补码概念" class="headerlink" title="2-原码、反码、补码概念"></a>2-原码、反码、补码概念</h2><blockquote><p>数据在内存里是以机器码（二进制形式的补码）进行存储的。</p><p><span style='color:red'>特别注意：正数的原码=反码=补码</span></p></blockquote><p>原码：最高位是符号位(0为正,1为负)，其余位是该数绝对值的二进制形式。</p><blockquote><p>如：</p><p>5 的 原码 = 0000 0101</p><p>-5 的原码 = 1000 0101</p></blockquote><p>反码：原码 的最高位(即符号位)不变，其余位按位取反。<span style='color:red'>(正数与原码一致)</span></p><blockquote><p>如：</p><p>5 的原码 = 0000 0101、反码 = 0000 0101</p><p>-5 的原码 = 1000 0101、反码 = 1111 1010</p></blockquote><p>补码：反码+1。<span style='color:red'>(正数与原码一致)</span></p><blockquote><p>如：</p><p>5 的原码 = 0000 0101、反码 = 0000 0101、补码 =  0000 0101</p><p>-5 的原码 = 1000 0101、反码 = 1111 1010、补码 = 1111 1011</p></blockquote><h2 id="3-原码、反码、补码计算例子"><a href="#3-原码、反码、补码计算例子" class="headerlink" title="3-原码、反码、补码计算例子"></a>3-原码、反码、补码计算例子</h2><p>由上面概念已经知道了正数以及负数的原码、反码、补码如何计算出来，并能从原码计算出补码了，也就是我们已经能够知道数据在内存中存储的形式内容。</p><p>那从补码中又怎么恢复成原来的数据呢？</p><p>答：这时候需要对补码进行逆运算，即从补码计算出原码。补码-1，符号位不变，其余位按位取反即可计算得到原码。</p><p>对于正数很好理解，原码、反码、补码都相等。</p><blockquote><p>如：</p><p>13的原码=反码=补码=0000 1101</p></blockquote><p>对于负数就需要进行逆运算了。</p><blockquote><p>如：</p><p>-13的补码 = 1111 0011</p><p>-13的反码 = 补码-1 = 1111 0010</p><p>-13的原码 = 反码的符号位不变，其余位按位取反 = 1000 1101</p></blockquote><p>负数的补码计算原码，除了逆运算的方式，还有一种更方便计算的方式，就是对补码再求补码，即<strong>补码的补码=原码</strong>。</p><blockquote><p>如：</p><p>-17的补码 = 1110 1111</p><p>-17的反码 = 原码符号位不变，其余位按位取反 = 1001 0000</p><p>-17的原码 = 反码+1 = 1001 0001</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 原码 </tag>
            
            <tag> 反码 </tag>
            
            <tag> 补码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-结构体内存对齐</title>
      <link href="/posts/37773.html"/>
      <url>/posts/37773.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#C%E8%AF%AD%E8%A8%80-%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90">C语言-结构体内存对齐</a><ul><li><a href="#1-%E5%BC%95%E9%A2%98">1-引题</a></li><li><a href="#2-%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BB%93%E6%9E%84%E4%BD%93%E8%A6%81%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90">2-为什么结构体要内存对齐</a></li><li><a href="#3-%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90%E5%90%AB%E4%B9%89">3-结构体对齐含义</a></li><li><a href="#4-%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90%E8%A7%84%E5%88%99%E4%B8%8E%E5%A4%A7%E5%B0%8F%E8%AE%A1%E7%AE%97">4-结构体对齐规则与大小计算</a><ul><li><a href="#4-1%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E8%A7%84%E5%88%99">4-1内存对齐规则</a></li><li><a href="#4-2%E5%AE%9E%E9%99%85%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97">4-2实际内存对齐数的计算</a></li><li><a href="#4-3%E5%AE%9E%E9%99%85%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E6%95%B0%E4%B8%8E%E7%BB%93%E6%9E%84%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%AE%A1%E7%AE%97%E4%BE%8B%E5%AD%90">4-3实际内存对齐数与结构体大小计算例子</a></li></ul></li><li><a href="#4-2%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%84%E4%BD%93%E5%A4%A7%E5%B0%8F%E5%AE%9E%E6%88%98">4-2计算结构体大小实战</a><ul><li><a href="#%E5%AE%9E%E6%88%981-%E6%99%AE%E9%80%9A%E7%BB%93%E6%9E%84%E4%BD%93%E6%88%90%E5%91%98">实战1-普通结构体成员</a></li><li><a href="#%E5%AE%9E%E6%88%982-%E5%90%AB%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E4%BD%93%E6%88%90%E5%91%98">实战2-含数组结构体成员</a></li><li><a href="#%E5%AE%9E%E6%88%983-%E5%B5%8C%E5%A5%97%E7%BB%93%E6%9E%84%E4%BD%93%E6%88%90%E5%91%98">实战3-嵌套结构体成员</a></li></ul></li><li><a href="#5-%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%A4%A7%E5%B0%8F">5-设置默认内存对齐大小</a></li><li><a href="#6-%E7%BB%93%E6%9E%84%E4%BD%93%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96">6-结构体大小优化</a></li><li><a href="#7-%E6%80%BB%E7%BB%93">7-总结</a></li></ul></li></ul><hr><h1 id="C语言-结构体内存对齐"><a href="#C语言-结构体内存对齐" class="headerlink" title="C语言-结构体内存对齐"></a>C语言-结构体内存对齐</h1><h2 id="1-引题"><a href="#1-引题" class="headerlink" title="1-引题"></a>1-引题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">&#125;data;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size=%d\n&quot;</span>,<span class="keyword">sizeof</span>(data));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以猜猜运行结果是多少？</p><details>   <summary>查看运行结果</summary>   <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/reverseyun/gallery@1.0/img/C语言-结构体内存对齐/运行结果.png" alt="运行结果" style="zoom:70%;" /><br>    可能不少人会认为运行结果是：<b>size=6</b><br>    但正确的运行结果应该是：<b>size=12</b><br>    由上方运行结果可知：结构体内存大小的计算并不是简单的将结构体成员的大小进行相加，即结构体成员在内存中<b>并不是紧密排列的</b>。<br>    那么正确的结果应该如何计算出来呢？这就涉及到<b>结构内存对齐</b>的知识了<br></details>由此例子可以引入以下几个问题：<ol><li><strong><a href="#2-%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BB%93%E6%9E%84%E4%BD%93%E8%A6%81%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90">为什么结构体要内存对齐</a></strong></li><li><strong><a href="#3-%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90%E5%90%AB%E4%B9%89">结构体对齐含义</a></strong></li><li><strong><a href="#4-%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90%E8%A7%84%E5%88%99%E4%B8%8E%E5%A4%A7%E5%B0%8F%E8%AE%A1%E7%AE%97">结构体对齐规则与大小计算</a></strong></li></ol><h2 id="2-为什么结构体要内存对齐"><a href="#2-为什么结构体要内存对齐" class="headerlink" title="2-为什么结构体要内存对齐"></a>2-为什么结构体要内存对齐</h2><p>cpu 把内存当成是一块一块的，块的大小可以是<strong>2,4,8,16 个字节</strong>，因此CPU在读取内存的时候是一块一块进行读取的，块的大小称为<strong>内存读取粒度（memory granularity）</strong>。</p><p>假设CPU要读取一个<strong>4字节大小的数据</strong>到寄存器中（假设<strong>内存读取粒度是4</strong>），分两种情况讨论：</p><ol><li><p>数据从0字节开始（<strong>内存对齐</strong>）</p><p>当数据从0字节开始的时候，cpu 直接将0-3四个字节完全读取到寄存器即可。(此时只需<strong>一次访问</strong>)</p></li><li><p>数据从1字节开始（<strong>内存不对齐</strong>）</p><p>当数据从1字节开始的时候，cpu 首先先将前4个字节读到寄存器，并再次读取 4-7 这四个字节字节的数据进寄存器，接着把0字节，5,6,7字节的数据剔除，最后合并1,2,3,4字节的数据进寄存器，对一个内存未对齐的寄存器进行了这么多额外操作，这大大的降低了CPU　的性能。(此时需要<strong>两次访问</strong>)</p></li></ol><p>由此可见：</p><ol><li>内存对齐可以大大提升内存访问速度，是一种用<strong>空间换时间</strong>的方法。</li><li>内存不对齐会导致每次读取数据都会读取两次，并且还要做额外的操作，使得内存读取速度减慢。</li></ol><h2 id="3-结构体对齐含义"><a href="#3-结构体对齐含义" class="headerlink" title="3-结构体对齐含义"></a>3-结构体对齐含义</h2><ul><li>结构体元素是按照定义顺序一个一个放到内存中去的，<strong>但并不是紧密排列的</strong>。</li><li>从结构体存储的首地址开始，每个元素放置到内存中时，它都会认为内存是<strong>按照自己的大小</strong>来划分的。因此元素放置的位置一定会在<strong>自己宽度(即自身实际内存对齐大小)的整数倍</strong>上开始。</li></ul><h2 id="4-结构体对齐规则与大小计算"><a href="#4-结构体对齐规则与大小计算" class="headerlink" title="4-结构体对齐规则与大小计算"></a>4-结构体对齐规则与大小计算</h2><h3 id="4-1内存对齐规则"><a href="#4-1内存对齐规则" class="headerlink" title="4-1内存对齐规则"></a>4-1内存对齐规则</h3><ol><li><span style='color:red'><strong>第一个成员</strong>放在结构体首地址偏移量为0的地址，即<strong>从结构体首地址开始存放</strong></span></li><li><span style='color:red'>每个结构体成员的首地址是<strong>成员自身实际内存对齐大小</strong>的整数倍</span></li><li><span style='color:red'>结构体大小是<strong>结构体实际内存对齐大小</strong>的整数倍</span></li></ol><h3 id="4-2实际内存对齐数的计算"><a href="#4-2实际内存对齐数的计算" class="headerlink" title="4-2实际内存对齐数的计算"></a>4-2实际内存对齐数的计算</h3><ul><li><strong>结构体成员实际内存对齐数</strong> = <strong>结构体成员数据类型大小</strong> 与 <strong>系统默认内存对齐数</strong> 之间的较小值</li><li><strong>结构体实际内存对齐数</strong> = <strong>结构体成员中最大的数据类型大小</strong> 与 <strong>系统默认内存对齐数</strong> 之间的较小值</li></ul><h3 id="4-3实际内存对齐数与结构体大小计算例子"><a href="#4-3实际内存对齐数与结构体大小计算例子" class="headerlink" title="4-3实际内存对齐数与结构体大小计算例子"></a>4-3实际内存对齐数与结构体大小计算例子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> a; </span><br><span class="line">    <span class="keyword">char</span>   b;</span><br><span class="line">    <span class="keyword">short</span>  c;</span><br><span class="line">&#125;data;</span><br></pre></td></tr></table></figure><ul><li><p><strong>系统默认内存对齐数</strong></p><ul><li>一般开发工具默认对齐数为<strong>8个字节</strong>，如：Visual Studio / Dev-C++ / …</li><li>Linux环境下一般默认值为4个字节</li><li>可以通过<strong>开发工具设置</strong>为<strong>1，2，4，8，16</strong>个字节</li><li>可以通过 <strong><a href="#5-%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%A4%A7%E5%B0%8F">#pragma pack(n)</a></strong> 指定为<strong>1，2，4，8，16</strong>个字节</li><li><strong>以下内容若无特殊说明，一律使用 <span style='color:red'>8字节</span> 进行计算</strong></li></ul></li><li><p><strong>结构体成员实际内存对齐数计算</strong></p><p>  <strong>a 成员实际内存对齐数</strong> = 系统默认对齐数(8字节) 与 自身成员数据类型大小(8字节) 的较小值 = 8字节</p><blockquote><p>即 a 成员的首地址必须是8的倍数，但由于 a 成员是结构体的第一个成员，所以首址为结构体首地址。</p></blockquote><p>  <strong>b 成员实际内存对齐数</strong> = 系统默认对齐数(8字节) 与 自身成员数据类型大小(1字节) 的较小值 = 1字节</p><blockquote><p>即 b 成员的首地址必须是1的倍数。</p></blockquote><p>  <strong>c 成员实际内存对齐数</strong> = 系统默认对齐数(8字节) 与 自身成员数据类型大小(2字节) 的较小值 = 2字节</p><blockquote><p>即 c 成员的首地址必须是2的倍数。</p></blockquote></li><li><p><strong>结构体实际内存对齐数计算</strong> </p><p>  <strong>data 结构体实际内存对齐数</strong> = 系统默认对齐数(8字节) 与 结构体成员中最大的数据类型大小(8字节) 的较小值</p><blockquote><p>即结构体实际内存对齐数为8字节</p></blockquote></li><li><p><strong>结构体大小计算</strong></p><p>  内存分布图：</p><blockquote><p>地址字段说明：</p><blockquote><p>带颜色区域：成员占用大小</p></blockquote><blockquote><p>不带颜色区域：填充占位字节</p></blockquote></blockquote>  <table>      <tr>          <th>结构体成员</th>          <th>分析过程(假设结构体首地址为1000)</th>          <th>地址</th>          <th>占用大小</th>      </tr>      <tr>          <td rowspan='4'>              double a<br>              首地址为结构体首地址          </td>          <td rowspan='4'>              从结构体首地址开始存储<br>              占用首地址[1000-1007]          </td>          <td style='background-color:#4169E1'>1000</td>          <td rowspan='4'>8个字节</td>      </tr>      <tr>          <td style='background-color:#4169E1'>1001</td>      </tr>      <tr>          <td style='background-color:#4169E1'>...</td>      </tr>      <tr>          <td style='background-color:#4169E1'>1007</td>      </tr>      <tr>          <td rowspan='2'>              char b<br>              首地址为1的倍数          </td>          <td rowspan='2'>              1008是1的倍数,b 成员从1008存储<br>              占用一个字节，c 成员从1009存储<br>              但1009不是2的倍数<br>              所以需要填充1个字节至1010<br>              占用首地址[1008-1009]          </td>          <td style='background-color:Coral'>1008</td>          <td rowspan='2'>2个字节</td>      </tr>      <tr>          <td>1009</td>      </tr>      <tr>          <td rowspan='4'>              short c<br>              首地址为2的倍数          </td>          <td rowspan='4'>              经过 b 成员填充，c成员从1010存储<br>              此时占用首地址[1010-1011]<br>              此时结构体大小=8+2+2=12<br>              结构体大小不符合8的倍数<br>              需要填充4个字节至16个字节<br>              占用首地址[1010-1015]          </td>          <td style='background-color:#BA55D3'>1010</td>          <td rowspan='4'>6个字节</td>      </tr>      <tr>          <td style='background-color:#BA55D3'>1011</td>      </tr>      <tr>          <td>...</td>      </tr>      <tr>          <td>1015</td>      </tr>  </table><blockquote><p>结构体大小为16个字节</p></blockquote></li></ul><h2 id="4-2计算结构体大小实战"><a href="#4-2计算结构体大小实战" class="headerlink" title="4-2计算结构体大小实战"></a>4-2计算结构体大小实战</h2><p>实战1. <strong><a href="#%E5%AE%9E%E6%88%981-%E6%99%AE%E9%80%9A%E7%BB%93%E6%9E%84%E4%BD%93%E6%88%90%E5%91%98">普通结构体成员</a></strong></p><p>实战2. <strong><a href="#%E5%AE%9E%E6%88%982-%E5%90%AB%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E4%BD%93%E6%88%90%E5%91%98">含数组结构体成员</a></strong></p><p>实战3. <strong><a href="#%E5%AE%9E%E6%88%983-%E5%B5%8C%E5%A5%97%E7%BB%93%E6%9E%84%E4%BD%93%E6%88%90%E5%91%98">嵌套结构体成员</a></strong></p><h3 id="实战1-普通结构体成员"><a href="#实战1-普通结构体成员" class="headerlink" title="实战1-普通结构体成员"></a>实战1-普通结构体成员</h3><blockquote><p>注：默认对齐数为4个字节</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a; </span><br><span class="line">    <span class="keyword">char</span>  b; </span><br><span class="line">    <span class="keyword">double</span> c; </span><br><span class="line">&#125;data;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size=%d\n&quot;</span>,<span class="keyword">sizeof</span>(data));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>   <summary>运行结果</summary>   size=16</details><details><summary>查看分析</summary>    <table>        <tr>            <th>结构体成员</th>            <th>自身数据类型大小</th>            <th>默认内存对齐大小</th>            <th>最终成员对齐大小</th>        </tr>        <tr>            <td>data.a (int)</td>            <td>4个字节</td>            <td>4个字节</td>            <td>4个字节</td>        </tr>        <tr>            <td>data.b (char)</td>            <td>1个字节</td>            <td>4个字节</td>            <td>1个字节</td>        </tr>        <tr>            <td>data.c (double)</td>            <td>8个字节</td>            <td>4个字节</td>            <td>4个字节</td>        </tr>    </table>    <b><span style='color:red'>结构体对齐大小</span> = 默认内存对齐大小(4字节) 与 结构体最大数据类型大小(8字节) 的较小值 = 4字节</b>    <br>    <br>    内存分布图：    <br>    <table>        <tr>            <th>结构体成员</th>            <th>分析过程(假设结构体首地址为1000)</th>            <th>地址</th>            <th>占用大小</th>        </tr>        <tr>            <td rowspan='4'>                data.a (int)<br>                首地址为结构体首地址            </td>            <td rowspan='4'>                从结构体首地址开始存储<br>                占用首地址[1000-1003]            </td>            <td style='background-color:#4169E1'>1000</td>            <td rowspan='4'>4个字节</td>        </tr>        <tr>            <td style='background-color:#4169E1'>1001</td>        </tr>        <tr>            <td style='background-color:#4169E1'>1002</td>        </tr>        <tr>            <td style='background-color:#4169E1'>1003</td>        </tr>        <tr>            <td rowspan='4'>                data.b (char)<br>                首地址为1的倍数            </td>            <td rowspan='4'>                1004是1的倍数,b 成员从1004存储<br>                占用 1 个字节，c 成员从1005存储<br>                但1005不是4的倍数<br>                所以需要填充3个字节至1008<br>                占用首地址[1004-1007]            </td>            <td style='background-color:Coral'>1004</td>            <td rowspan='4'>4个字节</td>        </tr>        <tr>            <td>1005</td>        </tr>        <tr>            <td>1006</td>        </tr>        <tr>            <td>1007</td>        </tr>        <tr>            <td rowspan='4'>                data.c (double)<br>                首地址为4的倍数            </td>            <td rowspan='4'>                经过 b 成员填充，c成员从1008存储<br>                此时占用首地址[1008-1015]<br>                此时结构体大小=4+4+8=16<br>                结构体大小满足结构体对齐大小 <span style='color:red'>4</span> 的倍数<br>                占用首地址[1008-1015]            </td>            <td style='background-color:#BA55D3'>1008</td>            <td rowspan='4'>8个字节</td>        </tr>        <tr>            <td style='background-color:#BA55D3'>1009</td>        </tr>        <tr>            <td style='background-color:#BA55D3'>...</td>        </tr>        <tr>            <td style='background-color:#BA55D3'>1015</td>        </tr>    </table>    <b>最终结构体大小为<span style='color:red'>16个字节</span>。</b></details><h3 id="实战2-含数组结构体成员"><a href="#实战2-含数组结构体成员" class="headerlink" title="实战2-含数组结构体成员"></a>实战2-含数组结构体成员</h3><blockquote><p>对齐规则与普通结构体成员一致，只是 <strong>数组成员所占用的内存大小 = 数组大小 * 数组的数据类型大小</strong></p><p>注：默认对齐数为8个字节</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">3</span>]; </span><br><span class="line">    <span class="keyword">int</span>  b[<span class="number">3</span>]; </span><br><span class="line">    <span class="keyword">char</span> c; </span><br><span class="line">&#125;data;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size=%d\n&quot;</span>,<span class="keyword">sizeof</span>(data));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>   <summary>运行结果</summary>   size=20</details><details><summary>查看分析</summary>    <table>        <tr>            <th>结构体成员</th>            <th>自身数据类型大小</th>            <th>默认内存对齐大小</th>            <th>最终成员对齐大小</th>        </tr>        <tr>            <td>data.a (char)</td>            <td>1个字节</td>            <td>8个字节</td>            <td>1个字节</td>        </tr>        <tr>            <td>data.b (int)</td>            <td>4个字节</td>            <td>8个字节</td>            <td>4个字节</td>        </tr>        <tr>            <td>data.c (char)</td>            <td>1个字节</td>            <td>8个字节</td>            <td>1个字节</td>        </tr>    </table>    <b><span style='color:red'>结构体对齐大小</span> = 默认内存对齐大小(8字节) 与 结构体最大数据类型大小(4字节) 的较小值 = 4字节</b>    <br>    <br>    内存分布图：    <br>    <table>        <tr>            <th>结构体成员</th>            <th>分析过程(假设结构体首地址为1000)</th>            <th>地址</th>            <th>占用大小</th>        </tr>        <tr>            <td rowspan='4'>                data.a (char[3])<br>                首地址为结构体首地址            </td>            <td rowspan='4'>                从结构体首地址开始存储<br>                占用 3*1=3 个字节，b成员从1003存储<br>                但1003不是4的倍数<br>                所以需要填充1个字节至1004<br>                占用首地址[1000-1003]            </td>            <td style='background-color:#4169E1'>1000</td>            <td rowspan='4'>4个字节</td>        </tr>        <tr>            <td style='background-color:#4169E1'>1001</td>        </tr>        <tr>            <td style='background-color:#4169E1'>1002</td>        </tr>        <tr>            <td>1003</td>        </tr>        <tr>            <td rowspan='4'>                data.b (int[3])<br>                首地址为4的倍数            </td>            <td rowspan='4'>                1004是4的倍数，b 成员从1004存储<br>                占用 3*4=12 个字节，c 成员从1016存储<br>                占用首地址[1004-1015]            </td>            <td style='background-color:Coral'>1004</td>            <td rowspan='4'>12个字节</td>        </tr>        <tr>            <td style='background-color:Coral'>1005</td>        </tr>        <tr>            <td style='background-color:Coral'>...</td>        </tr>        <tr>            <td style='background-color:Coral'>1015</td>        </tr>        <tr>            <td rowspan='4'>                data.c (char)<br>                首地址为1的倍数            </td>            <td rowspan='4'>                c成员从1016存储<br>                此时占用首地址[1016]<br>                此时结构体大小=4+12+1=17<br>                结构体大小不满足结构体对齐大小 <span style='color:red'>4</span> 的倍数<br>                需要填充3个字节<br>                占用首地址[1016-1019]            </td>            <td style='background-color:#BA55D3'>1016</td>            <td rowspan='4'>4个字节</td>        </tr>        <tr>            <td>1017</td>        </tr>        <tr>            <td>1008</td>        </tr>        <tr>            <td>1019</td>        </tr>    </table>    <b>最终结构体大小为 <span style='color:red'>20个字节</span> 。</b></details><h3 id="实战3-嵌套结构体成员"><a href="#实战3-嵌套结构体成员" class="headerlink" title="实战3-嵌套结构体成员"></a>实战3-嵌套结构体成员</h3><blockquote><p>对齐规则与普通结构体成员一致</p><p>但有两点需要注意：</p><ol><li><strong>嵌套的结构体成员的对齐数</strong> = <strong>自身的结构体成员中最大的数据类型大小</strong> 与 <strong>默认对齐数</strong> 的较小值</li><li><strong>计算结构体实际内存对齐大小要把嵌套结构体成员展开计算</strong></li></ol><p>注：默认对齐数为8个字节</p><p>如以下例子：data_2.d1成员中<strong>最大的数据类型大小为8字节</strong>，<strong>默认对齐数为8字节</strong>，<strong>两者较小值为8字节</strong>，所以data_2.d1成员的<strong>对齐数为8个字节</strong>，即d1的首地址需要是<strong>8的倍数</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data_1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> a; </span><br><span class="line">    <span class="keyword">double</span>  b; </span><br><span class="line">    <span class="keyword">char</span> c; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">3</span>]; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data_1</span> <span class="title">d1</span>;</span></span><br><span class="line">    <span class="keyword">int</span>  b[<span class="number">3</span>]; </span><br><span class="line">    <span class="keyword">char</span> c; </span><br><span class="line">&#125;data_2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size1=%d\n&quot;</span>,<span class="keyword">sizeof</span>(struct data_1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size2=%d\n&quot;</span>,<span class="keyword">sizeof</span>(data_2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>   <summary>运行结果</summary>   size1=24<br>   size2=48</details><details><summary>查看分析</summary><p><strong>一：对data1进行分析</strong></p><table>    <tr>        <th>结构体成员</th>        <th>自身数据类型大小</th>        <th>默认内存对齐大小</th>        <th>最终成员对齐大小</th>    </tr>    <tr>        <td>data_1.a (char)</td>        <td>1个字节</td>        <td>8个字节</td>        <td>1个字节</td>    </tr>    <tr>        <td>data_1.b (double)</td>        <td>8个字节</td>        <td>8个字节</td>        <td>8个字节</td>    </tr>    <tr>        <td>data_1.c (char)</td>        <td>1个字节</td>        <td>8个字节</td>        <td>1个字节</td>    </tr></table><b><span style='color:red'>结构体对齐大小</span> = 默认内存对齐大小(8字节) 与 结构体最大数据类型大小(8字节) 的较小值 = 8字节</b><br><br>内存分布图：<br><table>    <tr>        <th>结构体成员</th>        <th>分析过程(假设结构体首地址为1000)</th>        <th>地址</th>        <th>占用大小</th>    </tr>    <tr>        <td rowspan='4'>            data_1.a (char)<br>            首地址为结构体首地址        </td>        <td rowspan='4'>            从结构体首地址开始存储<br>            占用 1 个字节，b成员从1001存储<br>            但1001不是8的倍数<br>            所以需要填充7个字节至1008<br>            占用首地址[1000-1007]        </td>        <td style='background-color:#4169E1'>1000</td>        <td rowspan='4'>8个字节</td>    </tr>    <tr>        <td>1001</td>    </tr>    <tr>        <td>...</td>    </tr>    <tr>        <td>1007</td>    </tr>    <tr>        <td rowspan='4'>            data_1.b (double)<br>            首地址为8的倍数        </td>        <td rowspan='4'>            1008是8的倍数，b 成员从1008存储<br>            占用 8 个字节，c 成员从1016存储<br>            占用首地址[1008-1015]        </td>        <td style='background-color:Coral'>1008</td>        <td rowspan='4'>8个字节</td>    </tr>    <tr>        <td style='background-color:Coral'>1009</td>    </tr>    <tr>        <td style='background-color:Coral'>...</td>    </tr>    <tr>        <td style='background-color:Coral'>1015</td>    </tr>    <tr>        <td rowspan='4'>            data_1.c (char)<br>            首地址为1的倍数        </td>        <td rowspan='4'>            c成员从1016存储<br>            此时占用首地址[1016]<br>            此时结构体大小=8+8+1=17<br>            结构体大小不满足结构体对齐大小 <span style='color:red'>8</span> 的倍数 <br>            需要填充7个字节<br>            占用首地址[1016-1023]        </td>        <td style='background-color:#BA55D3'>1016</td>        <td rowspan='4'>8个字节</td>    </tr>    <tr>        <td>1017</td>    </tr>    <tr>        <td>...</td>    </tr>    <tr>        <td>1023</td>    </tr></table><b>data_1结构体大小为 <span style='color:red'>24个字节</span> 。</b><br><br><p><strong>二：对data2进行分析</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// data_2可以展开为</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">3</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// struct data_1 d1; </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> a; </span><br><span class="line">        <span class="keyword">double</span>  b; </span><br><span class="line">        <span class="keyword">char</span> c; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>  b[<span class="number">3</span>]; </span><br><span class="line">    <span class="keyword">char</span> c; </span><br><span class="line">&#125;data_2;</span><br></pre></td></tr></table></figure><table>    <tr>        <th>结构体成员</th>        <th>自身数据类型大小</th>        <th>默认内存对齐大小</th>        <th>最终成员对齐大小</th>    </tr>    <tr>        <td>data_2.a (char)</td>        <td>1个字节</td>        <td>8个字节</td>        <td>1个字节</td>    </tr>    <tr>        <td>data_2.d1 (struct data_1)</td>        <td>data_2.d1成员中最大的数据类型大小为8个字节</td>        <td>8个字节</td>        <td>8个字节</td>    </tr>    <tr>        <td>data_2.b (int)</td>        <td>4个字节</td>        <td>8个字节</td>        <td>4个字节</td>    </tr>    <tr>        <td>data_2.c (char)</td>        <td>1个字节</td>        <td>8个字节</td>        <td>1个字节</td>    </tr></table><b><span style='color:red'>结构体对齐大小</span> = 默认内存对齐大小(8字节) 与 <span style='color:red'>data_1展开后</span>的结构体最大数据类型大小(8字节) 的较小值 = 8字节</b><br><br>内存分布图：<br><table>    <tr>        <th>结构体成员</th>        <th>分析过程(假设结构体首地址为1000)</th>        <th>地址</th>        <th>占用大小</th>    </tr>    <tr>        <td rowspan='6'>            data_2.a (char[3])<br>            首地址为结构体首地址        </td>        <td rowspan='6'>            从结构体首地址开始存储<br>            占用 3*1=3 个字节，d1成员从1003存储<br>            但1003不是8的倍数<br>            所以需要填充5个字节至1008<br>            占用首地址[1000-1007]        </td>        <td style='background-color:#4169E1'>1000</td>        <td rowspan='6'>8个字节</td>    </tr>    <tr>        <td style='background-color:#4169E1'>1001</td>    </tr>    <tr>        <td style='background-color:#4169E1'>1002</td>    </tr>    <tr>        <td>1003</td>    </tr>    <tr>        <td>...</td>    </tr>    <tr>        <td>1007</td>    </tr>    <tr>        <td rowspan='4'>            data_2.d1 (struct data_1)<br>            首地址为8的倍数        </td>        <td rowspan='4'>            1008是8的倍数，d1 成员从1008存储<br>            占用 24 个字节，b 成员从1032存储<br>            占用首地址[1008-1031]        </td>        <td style='background-color:Coral'>1008</td>        <td rowspan='4'>24个字节</td>    </tr>    <tr>        <td style='background-color:Coral'>1009</td>    </tr>    <tr>        <td style='background-color:Coral'>...</td>    </tr>    <tr>        <td style='background-color:Coral'>1031</td>    </tr>    <tr>        <td rowspan='4'>            data_2.b (int[3])<br>            首地址为4的倍数        </td>        <td rowspan='4'>            1032是4的倍数，b成员从1032存储<br>            占用 4*3=12 个字节，c成员从1044<br>            占用首地址[1032-1043]<br>        </td>        <td style='background-color:#BA55D3'>1032</td>        <td rowspan='4'>12个字节</td>    </tr>    <tr>        <td>1033</td>    </tr>    <tr>        <td>...</td>    </tr>    <tr>        <td>1043</td>    </tr>    <tr>        <td rowspan='4'>            data_2.c (char)<br>            首地址为1的倍数        </td>        <td rowspan='4'>            c成员从1044存储<br>            此时占用首地址[1044]<br>            此时结构体大小=8+24+12+1=45<br>            结构体大小不满足结构体对齐大小 <span style='color:red'>8</span> 的倍数<br>            需要填充3个字节<br>            占用首地址[1044-1047]        </td>        <td style='background-color:#BA55D3'>1044</td>        <td rowspan='4'>4个字节</td>    </tr>    <tr>        <td>1045</td>    </tr>    <tr>        <td>1046</td>    </tr>    <tr>        <td>1047</td>    </tr></table><b>最终结构体大小为 <span style='color:red'>48个字节</span> 。</b></details><h2 id="5-设置默认内存对齐大小"><a href="#5-设置默认内存对齐大小" class="headerlink" title="5-设置默认内存对齐大小"></a>5-设置默认内存对齐大小</h2><p>前面提到过系统默认的内存对齐数一般是8个字节 (linux环境下一般是4个字节)</p><p>但有些开发工具也提供设置，如Visual Studio</p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/reverseyun/gallery@1.0/img/C语言-结构体内存对齐/VS配置默认结构体内存对齐数.jpg" style="zoom:100%;" /><p>除了在开发工具中可以设置默认内存对齐数之外，在程序中可以通过 <strong>#pragma pack(n)（n取值为1，2，4，8，16）</strong> 来指定系统默认内存对齐数。</p><p>例子：</p><ol><li><p>默认对齐数8字节</p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/reverseyun/gallery@1.0/img/C语言-结构体内存对齐/默认对齐数8字节.jpg" style="zoom:100%;" /></li><li><p>设置默认对齐数4字节</p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/reverseyun/gallery@1.0/img/C语言-结构体内存对齐/默认对齐数4字节.jpg" style="zoom:100%;" /></li><li><p>设置默认对齐数1字节(相当于不考虑内存对齐,直接存放)</p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/reverseyun/gallery@1.0/img/C语言-结构体内存对齐/默认对齐数1字节.jpg" style="zoom:100%;" /></li></ol><h2 id="6-结构体大小优化"><a href="#6-结构体大小优化" class="headerlink" title="6-结构体大小优化"></a>6-结构体大小优化</h2><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/reverseyun/gallery@1.0/img/C语言-结构体内存对齐/结构体大小优化.jpg" style="zoom:100%;" /><p>由上图可知：结构体成员的顺序会影响结构体大小</p><p>由于结构体对齐，成员的首地址需要是成员对齐数的倍数，不满足则要填充空字节。所以尽量减少空字节的填充可以使结构体的总大小减小。</p><p>减少空字节填充：</p><ol><li>相同数据类型放在一起</li><li>数据类型由小到大声明</li></ol><p><strong>结构体大小优化视具体情况而定，内存足够的情况下，为了提高程序可读性，可以不必要考虑结构体大小的优化</strong></p><p>如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明 英雄(hero) 结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span>  id;     <span class="comment">// id号</span></span><br><span class="line">    <span class="keyword">char</span> *name;  <span class="comment">// 名字</span></span><br><span class="line">    <span class="keyword">char</span> sex;    <span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">int</span>  atn;    <span class="comment">// 攻击力</span></span><br><span class="line">    <span class="keyword">int</span>  def;    <span class="comment">// 防御力</span></span><br><span class="line">    <span class="keyword">int</span>  hp;     <span class="comment">// 生命值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行结构体大小优化</span></span><br><span class="line"><span class="comment">// 可见优化后的顺序并不利于程序的可读性</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> sex;    <span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">int</span>  id;     <span class="comment">// id号</span></span><br><span class="line">    <span class="keyword">int</span>  atn;    <span class="comment">// 攻击力</span></span><br><span class="line">    <span class="keyword">int</span>  def;    <span class="comment">// 防御力</span></span><br><span class="line">    <span class="keyword">int</span>  hp;     <span class="comment">// 生命值</span></span><br><span class="line">    <span class="keyword">char</span> *name;  <span class="comment">// 名字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7-总结"></a>7-总结</h2><ol><li><p>结构体对齐优点：利用空间换时间，提高程序的性能</p></li><li><p>结构体对齐规则</p><ol><li><p>第一个成员放在结构体首地址偏移量为0的地址，即从结构体首地址开始存放</p></li><li><p>每个结构体成员的首地址是成员自身实际内存对齐大小的整数倍</p><p> 结构体成员实际内存对齐大小 = 成员自身数据类型大小 与 默认结构体内存对齐大小 的较小值</p></li><li><p>结构体大小是结构体实际内存对齐大小的整数倍</p><p> 结构体实际内存对齐大小 = 结构体成员中最大数据类型大小 与 默认结构体内存对齐大小 的较小值</p></li></ol></li><li><p>结构体大小计算三种情况</p><ol><li><p>普通结构体成员 (遵循对齐规则)</p></li><li><p>含数组结构体成员 (遵循对齐规则)</p><p>  数组成员所占用的内存大小 = 数组大小 * 数组的数据类型大小</p></li><li><p>嵌套结构体成员 (遵循对齐规则)</p><ol><li>嵌套的结构体成员的对齐数 = 自身的结构体成员中最大的数据类型大小 与 默认对齐数 的较小值</li><li>计算结构体实际内存对齐大小要把嵌套结构体成员展开计算</li></ol></li></ol></li><li><p>默认结构体对齐大小</p><ol><li>一般编译工具默认是8字节 (linux下一般是4字节)</li><li>一些编译工具经过配置可以更改默认结构体对齐大小(如：Visual Stdio…)</li><li>程序中通过 #pragma pack(n) 指定默认结构体对齐大小</li></ol></li><li><p>结构体大小优化</p><ol><li>相同数据类型放在一起</li><li>数据类型由小到大声明</li></ol><p>视具体情况而定，内存足够的情况下，为了提高程序可读性，可以不必要考虑结构体大小的优化</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 结构体内存对齐 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
